{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AppsDock OS Documentation This documentation is about the development of AppsDock OS , a PHP based enterprise platform for business applications. By reading this documentation you will learn the concept, composition and the development aspects of the AppsDock platform. You will be able to maintain, develop, adapt and extend the platform by writing apps, extension and plugins. Concept The AppsDock OS platform provides a universal foundation which is able to run a large scale of business apps.","title":"Introduction"},{"location":"#appsdock-os-documentation","text":"This documentation is about the development of AppsDock OS , a PHP based enterprise platform for business applications. By reading this documentation you will learn the concept, composition and the development aspects of the AppsDock platform. You will be able to maintain, develop, adapt and extend the platform by writing apps, extension and plugins.","title":"AppsDock OS Documentation"},{"location":"#concept","text":"The AppsDock OS platform provides a universal foundation which is able to run a large scale of business apps.","title":"Concept"},{"location":"exceptions/","text":"Exceptions This list provides an overview of all exception errors within AppsDock OS. For every error the list provides a more detailed description with possible causes and solutions. 10001 The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type BOOLEAN . 10002 The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type STRING . 10003 The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type INTEGER . 10004 The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type ARRAY . 10005 The option is not in the list of allowed options. When validating the value of the setting, it was found that it does not correspond to the allowed values. 10006 Some options are not in the list of allowed options. When validating the values of the setting, it was found that some do not correspond to the allowed values. 10007 The setting is not a valid date. When validating the value of the setting, it was found that it does not correspond to a date. A valid date format is 0000-00-00 . 10008 The setting is not a valid time. When validating the value of the setting, it was found that it does not correspond to a time. A valid time format is 00:00:00 . 10009 The setting does not exist. When reading the setting in the configuration, it was found that the setting does not exist. 10010 The setting does not exist. When changing the setting in the configuration, it was found that the setting does not exist. 10011 The setting does not exist. When resetting the setting in the configuration, it was found that the setting does not exist. 10012 The setting does not exist. When setting the setting in the user preferences, it was found that the setting does not exist. 12000 Cannot find ssh key pairs for this installation. Unfortunately, there is currently no detailed description available. Reasons AppsDock OS is not installed yet. * Could not create ssh key pairs. Solutions Check current installation and eventually run adk install * Run adk util:ssh-gen for generating new key pairs. Please note: All current auth session will not work anymore. 12001 The username doest not match with any existing user. Unfortunately, there is currently no detailed description available. Reasons The entered username does not exist. * The entered password is wrong or does not related to the username. Solutions Check the username and try again. * Account may not exist now, please contact your account administrator. 12002 An initialized user account is not enabled for authentication. Unfortunately, there is currently no detailed description available. Reasons The user account has been created recently and requires an action of the account owner for activation. Solutions Check your email inbox for an activation email and complete the account activation by following the instructions. * Contact the user account administrator and request for a new activation email. 12003 A potentially auth bruteforce attack has been detected. Unfortunately, there is currently no detailed description available. Reasons Frequently failed login attempts. Solutions Try again shortly. 12004 Wrong password. Unfortunately, there is currently no detailed description available. Reasons Username or password is wrong. Solutions Check entered username and password and try again. 12005 User account is locked. Unfortunately, there is currently no detailed description available. Solutions Contact the user account administrator. 12006 User account is inactive. Unfortunately, there is currently no detailed description available. Solutions Contact the user account administrator.","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"This list provides an overview of all exception errors within AppsDock OS. For every error the list provides a more detailed description with possible causes and solutions.","title":"Exceptions"},{"location":"exceptions/#10001","text":"The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type BOOLEAN .","title":"10001"},{"location":"exceptions/#10002","text":"The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type STRING .","title":"10002"},{"location":"exceptions/#10003","text":"The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type INTEGER .","title":"10003"},{"location":"exceptions/#10004","text":"The setting has the wrong type. When validating the data type of the value of the setting, it was found that it does not correspond to the expected data type ARRAY .","title":"10004"},{"location":"exceptions/#10005","text":"The option is not in the list of allowed options. When validating the value of the setting, it was found that it does not correspond to the allowed values.","title":"10005"},{"location":"exceptions/#10006","text":"Some options are not in the list of allowed options. When validating the values of the setting, it was found that some do not correspond to the allowed values.","title":"10006"},{"location":"exceptions/#10007","text":"The setting is not a valid date. When validating the value of the setting, it was found that it does not correspond to a date. A valid date format is 0000-00-00 .","title":"10007"},{"location":"exceptions/#10008","text":"The setting is not a valid time. When validating the value of the setting, it was found that it does not correspond to a time. A valid time format is 00:00:00 .","title":"10008"},{"location":"exceptions/#10009","text":"The setting does not exist. When reading the setting in the configuration, it was found that the setting does not exist.","title":"10009"},{"location":"exceptions/#10010","text":"The setting does not exist. When changing the setting in the configuration, it was found that the setting does not exist.","title":"10010"},{"location":"exceptions/#10011","text":"The setting does not exist. When resetting the setting in the configuration, it was found that the setting does not exist.","title":"10011"},{"location":"exceptions/#10012","text":"The setting does not exist. When setting the setting in the user preferences, it was found that the setting does not exist.","title":"10012"},{"location":"exceptions/#12000","text":"Cannot find ssh key pairs for this installation. Unfortunately, there is currently no detailed description available.","title":"12000"},{"location":"exceptions/#reasons","text":"AppsDock OS is not installed yet. * Could not create ssh key pairs.","title":"Reasons"},{"location":"exceptions/#solutions","text":"Check current installation and eventually run adk install * Run adk util:ssh-gen for generating new key pairs. Please note: All current auth session will not work anymore.","title":"Solutions"},{"location":"exceptions/#12001","text":"The username doest not match with any existing user. Unfortunately, there is currently no detailed description available.","title":"12001"},{"location":"exceptions/#reasons_1","text":"The entered username does not exist. * The entered password is wrong or does not related to the username.","title":"Reasons"},{"location":"exceptions/#solutions_1","text":"Check the username and try again. * Account may not exist now, please contact your account administrator.","title":"Solutions"},{"location":"exceptions/#12002","text":"An initialized user account is not enabled for authentication. Unfortunately, there is currently no detailed description available.","title":"12002"},{"location":"exceptions/#reasons_2","text":"The user account has been created recently and requires an action of the account owner for activation.","title":"Reasons"},{"location":"exceptions/#solutions_2","text":"Check your email inbox for an activation email and complete the account activation by following the instructions. * Contact the user account administrator and request for a new activation email.","title":"Solutions"},{"location":"exceptions/#12003","text":"A potentially auth bruteforce attack has been detected. Unfortunately, there is currently no detailed description available.","title":"12003"},{"location":"exceptions/#reasons_3","text":"Frequently failed login attempts.","title":"Reasons"},{"location":"exceptions/#solutions_3","text":"Try again shortly.","title":"Solutions"},{"location":"exceptions/#12004","text":"Wrong password. Unfortunately, there is currently no detailed description available.","title":"12004"},{"location":"exceptions/#reasons_4","text":"Username or password is wrong.","title":"Reasons"},{"location":"exceptions/#solutions_4","text":"Check entered username and password and try again.","title":"Solutions"},{"location":"exceptions/#12005","text":"User account is locked. Unfortunately, there is currently no detailed description available.","title":"12005"},{"location":"exceptions/#solutions_5","text":"Contact the user account administrator.","title":"Solutions"},{"location":"exceptions/#12006","text":"User account is inactive. Unfortunately, there is currently no detailed description available.","title":"12006"},{"location":"exceptions/#solutions_6","text":"Contact the user account administrator.","title":"Solutions"},{"location":"gettingstarted/api/rest/","text":"REST API Endpoints To create your own REST API endpoints for an app, create a class that inherits from the AppsDock \u276f Core \u276f Contracts \u276f App \u276f Application \u276f RestAPIController . In this class, the individual endpoints are defined via annotation attributes. Access to endpoints can be secured by means of policies. Methods Parameter Data type Default value Required Description 1 STRING STRING[] - \u2714 Possible values are DELETE , GET , HEAD , PATCH , POST and PUT . 2 STRING - \u2714 A valid URI . 3 STRING - \u2714 A unique name in domain notation. 4 INTEGER 1 \u2718 The API version. Legend: \u2714 Yes \u2718 No 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <?php class BookRestAPI extends RestAPIController { #[API('GET', '/books', 'book.list')] public function listBooks () : JsonResponse { ... } #[API('GET', '/books/{id}', 'book.get')] public function getBook ( string $bookId ) : JsonResponse { ... } #[API('POST', '/books', 'book.create')] public function createBook () : JsonResponse { ... } #[API('DELETE', '/books/{id}', 'book.delete')] public function deleteBook ( string $bookId ) : JsonResponse { ... } } Return value The return value of an endpoint must always be of the data type AppsDock \u276f Core \u276f Http \u276f JsonResponse . To create a general response, the method createResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createResponse ( int $statusCode = 200 , array $data = [], array $headers = [] ); If an HTTP status code is to be returned, the method createStatusResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createStatusResponse ( int $statusCode , string $message = null , array $headers = [] ); If data is to be returned, the method createDataResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createDataResponse ( ReadModel | ReadModelCollection | null $data , int $statusCode = 200 , array $headers = [] );","title":"REST"},{"location":"gettingstarted/api/rest/#rest-api","text":"","title":"REST API"},{"location":"gettingstarted/api/rest/#endpoints","text":"To create your own REST API endpoints for an app, create a class that inherits from the AppsDock \u276f Core \u276f Contracts \u276f App \u276f Application \u276f RestAPIController . In this class, the individual endpoints are defined via annotation attributes. Access to endpoints can be secured by means of policies.","title":"Endpoints"},{"location":"gettingstarted/api/rest/#methods","text":"Parameter Data type Default value Required Description 1 STRING STRING[] - \u2714 Possible values are DELETE , GET , HEAD , PATCH , POST and PUT . 2 STRING - \u2714 A valid URI . 3 STRING - \u2714 A unique name in domain notation. 4 INTEGER 1 \u2718 The API version. Legend: \u2714 Yes \u2718 No 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 <?php class BookRestAPI extends RestAPIController { #[API('GET', '/books', 'book.list')] public function listBooks () : JsonResponse { ... } #[API('GET', '/books/{id}', 'book.get')] public function getBook ( string $bookId ) : JsonResponse { ... } #[API('POST', '/books', 'book.create')] public function createBook () : JsonResponse { ... } #[API('DELETE', '/books/{id}', 'book.delete')] public function deleteBook ( string $bookId ) : JsonResponse { ... } }","title":"Methods"},{"location":"gettingstarted/api/rest/#return-value","text":"The return value of an endpoint must always be of the data type AppsDock \u276f Core \u276f Http \u276f JsonResponse . To create a general response, the method createResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createResponse ( int $statusCode = 200 , array $data = [], array $headers = [] ); If an HTTP status code is to be returned, the method createStatusResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createStatusResponse ( int $statusCode , string $message = null , array $headers = [] ); If data is to be returned, the method createDataResponse can be used. 1 2 3 4 5 6 7 <?php $this -> createDataResponse ( ReadModel | ReadModelCollection | null $data , int $statusCode = 200 , array $headers = [] );","title":"Return value"},{"location":"gettingstarted/guidelines/commit-messages/","text":"Commit messages The commit message must begin with the type of commit, followed by any number of tags. Optionally, a note can also be specified. This must begin with a capital letter. The second and all further lines contain the changes that have taken place. One change per line. Paragraphs are not permitted; they must be written through, as a paragraph introduces a new change. Types Type Description BUGIFX Error in code fixed. The note area must contain the issue (number) if available. CHANGE Existing code changed. HOTFIX Bug fixed at short notice, without planning and testing). NEW New code added. REFACTOR Reorganised existing code. RELEASE New version released. The version number must be specified with a leading v as a tag. Tags The tags must be written in Camel case format. The tags must be listed in order from general to specific. Tag Description Example #component Changes affecting components. components/ #css Adjustments in stylesheet files only. .css, .sass #design Cosmetic adjustments that only affect the appearance, but no function. .css, .sass, .vue, ... #git All Git files. .gitignore #middleware Changes that affect the middleware. middleware/*.js #nuxt All Nuxt.js files. nuxt.config.js #package The package.json file. package.json #page Changes that affect pages. page/ #plugin Changes that affect plugins. plugin/*.js #poc Changes that are temporarily relevant for a proof of concept. .* #project All files that are not directly related to the application. package.json, nuxt.config.js, docker-compose.yml #static Changes that affect static files. static/ #store All changes that affect the store. store/.js #vuetify All Vuetify.js files. vuetify.options.js Examples 1 2 3 CHANGE #plugin #css #middleware Image plugin Add a new image plugin for test images. Add a new static css helper file. 1 RELEASE #v1.12.5 Pre-Release","title":"Commit messages"},{"location":"gettingstarted/guidelines/commit-messages/#commit-messages","text":"The commit message must begin with the type of commit, followed by any number of tags. Optionally, a note can also be specified. This must begin with a capital letter. The second and all further lines contain the changes that have taken place. One change per line. Paragraphs are not permitted; they must be written through, as a paragraph introduces a new change.","title":"Commit messages"},{"location":"gettingstarted/guidelines/commit-messages/#types","text":"Type Description BUGIFX Error in code fixed. The note area must contain the issue (number) if available. CHANGE Existing code changed. HOTFIX Bug fixed at short notice, without planning and testing). NEW New code added. REFACTOR Reorganised existing code. RELEASE New version released. The version number must be specified with a leading v as a tag.","title":"Types"},{"location":"gettingstarted/guidelines/commit-messages/#tags","text":"The tags must be written in Camel case format. The tags must be listed in order from general to specific. Tag Description Example #component Changes affecting components. components/ #css Adjustments in stylesheet files only. .css, .sass #design Cosmetic adjustments that only affect the appearance, but no function. .css, .sass, .vue, ... #git All Git files. .gitignore #middleware Changes that affect the middleware. middleware/*.js #nuxt All Nuxt.js files. nuxt.config.js #package The package.json file. package.json #page Changes that affect pages. page/ #plugin Changes that affect plugins. plugin/*.js #poc Changes that are temporarily relevant for a proof of concept. .* #project All files that are not directly related to the application. package.json, nuxt.config.js, docker-compose.yml #static Changes that affect static files. static/ #store All changes that affect the store. store/.js #vuetify All Vuetify.js files. vuetify.options.js","title":"Tags"},{"location":"gettingstarted/guidelines/commit-messages/#examples","text":"1 2 3 CHANGE #plugin #css #middleware Image plugin Add a new image plugin for test images. Add a new static css helper file. 1 RELEASE #v1.12.5 Pre-Release","title":"Examples"},{"location":"gettingstarted/guidelines/configuration/","text":"Configuration Setting ID The first part of the ID of a setting is always composed of the app context, such as com.appsdock or com.appsdock.hrm , followed by the identifier config . This is followed by a colon as a separator. The second part consists of any (or none) grouping separated by dots. The last word is the name of the setting. Examples Context Identifier 1 Separator Group 2 Name com.appsdock .config : maintenance date com.appsdock .config : email.smtp username com.appsdock.hrm .config : leave max Setting types ID Name Description BOOL True | False A \"either or\" choice. STRING String A string. It's the default . INT Number A signed number. SELECT Selection A single selection of options. MULTISELECT Multi selection A multiple selection of options. DATE Date A date. TIME Time A time. Default value The default value is used if no value has been set by the user. Therefore, it can be easily overwritten during updates. If a value has been set by the user, it remains unaffected. The possibility to change the values is managed via the rights system. There are settings that cannot be changed by normal administrators, so the default value is always used here. Database Field Type id VARCHAR(255) type ENUM('BOOL', 'STRING', 'INT', 'SELECT', 'MULTISELECT', 'DATE', 'TIME') value JSON default JSON options JSON Examples id type value default options com.appsdock.config:email.smtp.authentication BOOL [true] [] [] com.appsdock.config:email.smtp.username STRING [\"example@example.com\"] [] [] com.appsdock.config:email.smtp.connection.retries INT [10] [5] [] com.appsdock.hrm.config:notification.email.interval SELECT [\"daily\"] [\"weekly\"] [\"daily\", \"weekly\", \"monthly\"] com.appsdock.config:notification.channels MULTISELECT [\"browser\", \"email\", \"discord\"] [\"browser\"] [\"browser\", \"email\", \"discord\", \"telegram\", \"whatsapp\", \"sms\"]} com.appsdock.config:maintenance.date DATE [\"2021-06-01\"]} [] com.appsdock.config:maintenance.time TIME [\"14:35\"] [] The identifier for configuration settings is always config . \u21a9 A group is optional . \u21a9","title":"Configuration"},{"location":"gettingstarted/guidelines/configuration/#configuration","text":"","title":"Configuration"},{"location":"gettingstarted/guidelines/configuration/#setting-id","text":"The first part of the ID of a setting is always composed of the app context, such as com.appsdock or com.appsdock.hrm , followed by the identifier config . This is followed by a colon as a separator. The second part consists of any (or none) grouping separated by dots. The last word is the name of the setting.","title":"Setting ID"},{"location":"gettingstarted/guidelines/configuration/#examples","text":"Context Identifier 1 Separator Group 2 Name com.appsdock .config : maintenance date com.appsdock .config : email.smtp username com.appsdock.hrm .config : leave max","title":"Examples"},{"location":"gettingstarted/guidelines/configuration/#setting-types","text":"ID Name Description BOOL True | False A \"either or\" choice. STRING String A string. It's the default . INT Number A signed number. SELECT Selection A single selection of options. MULTISELECT Multi selection A multiple selection of options. DATE Date A date. TIME Time A time.","title":"Setting types"},{"location":"gettingstarted/guidelines/configuration/#default-value","text":"The default value is used if no value has been set by the user. Therefore, it can be easily overwritten during updates. If a value has been set by the user, it remains unaffected. The possibility to change the values is managed via the rights system. There are settings that cannot be changed by normal administrators, so the default value is always used here.","title":"Default value"},{"location":"gettingstarted/guidelines/configuration/#database","text":"Field Type id VARCHAR(255) type ENUM('BOOL', 'STRING', 'INT', 'SELECT', 'MULTISELECT', 'DATE', 'TIME') value JSON default JSON options JSON","title":"Database"},{"location":"gettingstarted/guidelines/configuration/#examples_1","text":"id type value default options com.appsdock.config:email.smtp.authentication BOOL [true] [] [] com.appsdock.config:email.smtp.username STRING [\"example@example.com\"] [] [] com.appsdock.config:email.smtp.connection.retries INT [10] [5] [] com.appsdock.hrm.config:notification.email.interval SELECT [\"daily\"] [\"weekly\"] [\"daily\", \"weekly\", \"monthly\"] com.appsdock.config:notification.channels MULTISELECT [\"browser\", \"email\", \"discord\"] [\"browser\"] [\"browser\", \"email\", \"discord\", \"telegram\", \"whatsapp\", \"sms\"]} com.appsdock.config:maintenance.date DATE [\"2021-06-01\"]} [] com.appsdock.config:maintenance.time TIME [\"14:35\"] [] The identifier for configuration settings is always config . \u21a9 A group is optional . \u21a9","title":"Examples"},{"location":"gettingstarted/guidelines/exceptions/","text":"Exceptions Error code ranges Range Context Scope Description 10.000 Core AppsDock OS core components. 11.000 Infrastructure AppsDock OS core infrastructure components. 12.000 Security & authentication AppsDock OS core security and authentication components. 13.000 Internal communication AppsDock OS core internal communication components. 20.000 System AppsDock OS system components. 30.000 Integration Third party API services, like an email service provider. 40.000 Plugin Small application to extend AppsDock OS or app functionality. 90.000 1 Apps Applications build with AppsDock OS . The ranges from 50.000 to 80.000 are reserved for future use. \u21a9","title":"Exceptions"},{"location":"gettingstarted/guidelines/exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"gettingstarted/guidelines/exceptions/#error-code-ranges","text":"Range Context Scope Description 10.000 Core AppsDock OS core components. 11.000 Infrastructure AppsDock OS core infrastructure components. 12.000 Security & authentication AppsDock OS core security and authentication components. 13.000 Internal communication AppsDock OS core internal communication components. 20.000 System AppsDock OS system components. 30.000 Integration Third party API services, like an email service provider. 40.000 Plugin Small application to extend AppsDock OS or app functionality. 90.000 1 Apps Applications build with AppsDock OS . The ranges from 50.000 to 80.000 are reserved for future use. \u21a9","title":"Error code ranges"},{"location":"gettingstarted/guidelines/naming-convention/","text":"Naming convention Classes Class names are written in CamelCase notation. Class names should be as meaningful as possible. If a class name contains an abbreviation, API becomes Api and SQL becomes Sql for example. Exceptions If an abbreviation stands alone or is at the end of the class name, it is written in capital letters like API , DI , RestAPI or ExtendedHTML . Methods Method names are written in CamelCase notation. Method names should be as meaningful as possible. If a method name contains an abbreviation, API becomes Api and SQL becomes Sql for example. Exceptions If an abbreviation stands alone or is at the end of the method name, it is written in capital letters like API , DI , RestAPI or ExtendedHTML .","title":"Naming convention"},{"location":"gettingstarted/guidelines/naming-convention/#naming-convention","text":"","title":"Naming convention"},{"location":"gettingstarted/guidelines/naming-convention/#classes","text":"Class names are written in CamelCase notation. Class names should be as meaningful as possible. If a class name contains an abbreviation, API becomes Api and SQL becomes Sql for example.","title":"Classes"},{"location":"gettingstarted/guidelines/naming-convention/#exceptions","text":"If an abbreviation stands alone or is at the end of the class name, it is written in capital letters like API , DI , RestAPI or ExtendedHTML .","title":"Exceptions"},{"location":"gettingstarted/guidelines/naming-convention/#methods","text":"Method names are written in CamelCase notation. Method names should be as meaningful as possible. If a method name contains an abbreviation, API becomes Api and SQL becomes Sql for example.","title":"Methods"},{"location":"gettingstarted/guidelines/naming-convention/#exceptions_1","text":"If an abbreviation stands alone or is at the end of the method name, it is written in capital letters like API , DI , RestAPI or ExtendedHTML .","title":"Exceptions"},{"location":"gettingstarted/phpstorm/xdebug/","text":"Xdebug setup Step 1: PhpStorm Follow the instructions on the screenshot. Step 2: Server Map local paths to remote paths. Step 2: Configuration Got to Run \u276f Debug \u276f Edit configurations \u276f Expand defaults \u276f PHP Remote debug and select the server created in Step 2. Step 4: Listening Go to Run \u276f Start listening for PHP connections and start listening. Then set a breakpoint in PhpStorm and call page in browser to test the setup.","title":"Xdebug"},{"location":"gettingstarted/phpstorm/xdebug/#xdebug-setup","text":"","title":"Xdebug setup"},{"location":"gettingstarted/phpstorm/xdebug/#step-1-phpstorm","text":"Follow the instructions on the screenshot.","title":"Step 1: PhpStorm"},{"location":"gettingstarted/phpstorm/xdebug/#step-2-server","text":"Map local paths to remote paths.","title":"Step 2: Server"},{"location":"gettingstarted/phpstorm/xdebug/#step-2-configuration","text":"Got to Run \u276f Debug \u276f Edit configurations \u276f Expand defaults \u276f PHP Remote debug and select the server created in Step 2.","title":"Step 2: Configuration"},{"location":"gettingstarted/phpstorm/xdebug/#step-4-listening","text":"Go to Run \u276f Start listening for PHP connections and start listening. Then set a breakpoint in PhpStorm and call page in browser to test the setup.","title":"Step 4: Listening"},{"location":"identity-access/authentication/","text":"AppsDock OS Authentication Service The AppsDock OS application server provides a build in authentication and authorization service to secure the resources. This topic provides an overview how to authenticate and access secured resources of the application server. Basics The request of resources from AppsDock OS application server requires an access token from the AppsDock OS authentication service. To obtain an access token, there must be a registered auth client at AppsDock OS identity management which must be used when requesting the auth endpoints with client credentials from your web or app application. Auth Client The access of auth API endpoints requires at least one registered auth client at AppsDock OS identity management. The AppsDock OS identity management can register multiple auth client with different configurations which can be used by different applications. Each auth client has its own credentials (client id or client id with secret) which must be used when requesting the auth API . The credentials can be attached as basic base64 encoded Auhtorization header or as query parameter at request uri. Access token The access token is issued by the AppsDock authentication service and contains secured information (claims) about the actual operator. The token also contains information which are used to validate/authenticate the operator and verify that it has the required permissions / is authorized to perform the operation. Access tokens have to be attached to each request that intents to access secured resources of the AppsDock OS application server. The transport must be always over a secured channel like HTTPS . An access token issued by the AppsDock authentication service looks like the following example: 1 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c To attach the access token, you must set the access token as bearer type in the Authorization header. Authentication The AppsDock OS authentication service provides an API for token and cookie based authentication management which includes the following operations: Endpoint Operation /auth/token Authentication with email/username and password /auth/token/refresh Session/Token refresh via refresh token or cookie /auth/revoke Revoke auth session via refresh token or cookie The AppsDock OS authentication service supports both token and cookie based authentication flows. Token Based Auth The token based authentication is used by confidential clients like mobile apps, which are capable of storing the refresh token securely. To obtain an access and refresh token, you have to send a request with the auth client credentials as authorization header to the token endpoint. 1 2 3 4 5 POST https://domain.com/auth/token Content-Type: application/json Authrorization: Basic WIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF {\"email\": \"jon@doe.com\", \"password\": \"xxxxx\"} The response contains the access/refresh token and additional information about the access token. 1 2 3 4 5 6 7 { \"expires_in\" : 180 , \"expires_at\" : 1595453215 , \"token_type\" : \"bearer\" , \"access_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0......\" , \"refresh_token\" : \"xwRJSMxNTE2MjMeKKF2QiwibmFtZSIfwpMeJf6Ik\" } The access token must be attached as bearer token in Authorization header on each request of secured resources. The refresh token is used to refresh the access token when it expires and obtain a new access token. Refresh token storage The refresh token must be stored securely and should not be accessible by the client user. Do not store the refresh token into any kind of client side storages of web applications like local or session store nor into cookies. Cookie Based Auth A cookie based client response only the expiry information about the current auth session, and uses a secured HTTPS only cookie to store the auth session information on client side. The auth cookie issued by the cookie based confidential client has also a short lifetime like the access token, so it must be refreshed to keep the auth session valid. 1 2 3 4 { \"expires_in\" : 180 , \"expires_at\" : 1595453215 } Public clients Public auth clients are currently not supported by the AppsDock authentication service!","title":"Authentication"},{"location":"identity-access/authentication/#appsdock-os-authentication-service","text":"The AppsDock OS application server provides a build in authentication and authorization service to secure the resources. This topic provides an overview how to authenticate and access secured resources of the application server.","title":"AppsDock OS Authentication Service"},{"location":"identity-access/authentication/#basics","text":"The request of resources from AppsDock OS application server requires an access token from the AppsDock OS authentication service. To obtain an access token, there must be a registered auth client at AppsDock OS identity management which must be used when requesting the auth endpoints with client credentials from your web or app application.","title":"Basics"},{"location":"identity-access/authentication/#auth-client","text":"The access of auth API endpoints requires at least one registered auth client at AppsDock OS identity management. The AppsDock OS identity management can register multiple auth client with different configurations which can be used by different applications. Each auth client has its own credentials (client id or client id with secret) which must be used when requesting the auth API . The credentials can be attached as basic base64 encoded Auhtorization header or as query parameter at request uri.","title":"Auth Client"},{"location":"identity-access/authentication/#access-token","text":"The access token is issued by the AppsDock authentication service and contains secured information (claims) about the actual operator. The token also contains information which are used to validate/authenticate the operator and verify that it has the required permissions / is authorized to perform the operation. Access tokens have to be attached to each request that intents to access secured resources of the AppsDock OS application server. The transport must be always over a secured channel like HTTPS . An access token issued by the AppsDock authentication service looks like the following example: 1 eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c To attach the access token, you must set the access token as bearer type in the Authorization header.","title":"Access token"},{"location":"identity-access/authentication/#authentication","text":"The AppsDock OS authentication service provides an API for token and cookie based authentication management which includes the following operations: Endpoint Operation /auth/token Authentication with email/username and password /auth/token/refresh Session/Token refresh via refresh token or cookie /auth/revoke Revoke auth session via refresh token or cookie The AppsDock OS authentication service supports both token and cookie based authentication flows.","title":"Authentication"},{"location":"identity-access/authentication/#token-based-auth","text":"The token based authentication is used by confidential clients like mobile apps, which are capable of storing the refresh token securely. To obtain an access and refresh token, you have to send a request with the auth client credentials as authorization header to the token endpoint. 1 2 3 4 5 POST https://domain.com/auth/token Content-Type: application/json Authrorization: Basic WIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF {\"email\": \"jon@doe.com\", \"password\": \"xxxxx\"} The response contains the access/refresh token and additional information about the access token. 1 2 3 4 5 6 7 { \"expires_in\" : 180 , \"expires_at\" : 1595453215 , \"token_type\" : \"bearer\" , \"access_token\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0......\" , \"refresh_token\" : \"xwRJSMxNTE2MjMeKKF2QiwibmFtZSIfwpMeJf6Ik\" } The access token must be attached as bearer token in Authorization header on each request of secured resources. The refresh token is used to refresh the access token when it expires and obtain a new access token. Refresh token storage The refresh token must be stored securely and should not be accessible by the client user. Do not store the refresh token into any kind of client side storages of web applications like local or session store nor into cookies.","title":"Token Based Auth"},{"location":"identity-access/authentication/#cookie-based-auth","text":"A cookie based client response only the expiry information about the current auth session, and uses a secured HTTPS only cookie to store the auth session information on client side. The auth cookie issued by the cookie based confidential client has also a short lifetime like the access token, so it must be refreshed to keep the auth session valid. 1 2 3 4 { \"expires_in\" : 180 , \"expires_at\" : 1595453215 } Public clients Public auth clients are currently not supported by the AppsDock authentication service!","title":"Cookie Based Auth"},{"location":"identity-access/identity/","text":"Identities Identities include users, groups and roles. User The user is used for the identification and authorisation of an entity. Groups Users can be combined into a group. A user can belong to several groups. Roles can be assigned to several users through a group. Roles Roles are identities that can be assigned to users and groups. The permissions are identified by means of the role. One or more policies can be assigned to a role.","title":"Identity"},{"location":"identity-access/identity/#identities","text":"Identities include users, groups and roles.","title":"Identities"},{"location":"identity-access/identity/#user","text":"The user is used for the identification and authorisation of an entity.","title":"User"},{"location":"identity-access/identity/#groups","text":"Users can be combined into a group. A user can belong to several groups. Roles can be assigned to several users through a group.","title":"Groups"},{"location":"identity-access/identity/#roles","text":"Roles are identities that can be assigned to users and groups. The permissions are identified by means of the role. One or more policies can be assigned to a role.","title":"Roles"},{"location":"identity-access/policies-and-permissions/","text":"Policies and permissions Permission A permission consists of one or more policies. Examples The permission DMS user has the indefinite right to read within the entire DMS and the definite right to write in its own folders. Policy Action Role Resource Effect Read com.appsdock.dms.action:volume.read Role A * ALLOW Read com.appsdock.dms.action:volume.read Role B Volume A ALLOW Write com.appsdock.dms.action:volume.write Role B Volume B ALLOW Write com.appsdock.dms.action:volume.write Role C Volume B DENY Policy A policy consists of the action, role, resource and effect. Action Actions are defined by the apps. Example The DMS app defines the action Create folder . Role Exactly one role must be assigned per policy. Resource A resource can be defined or undefined. Indefinite resources are defined by means of the * . Effect The effect is either allow or deny . Permission control The permission control is given the action as the first parameter, and the context as the second parameter. 1 2 3 4 5 6 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId () ); Given a specific resource, its UUID is given as the third parameter. 1 2 3 4 5 6 7 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId (), $appId ); Alternatively, a default value can be specified as the fourth parameter. This is only returned if no policy exists. 1 2 3 4 5 6 7 8 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId (), $appId , $default ); REST API Permissions are defined as method-attribute or alternatively as class-attribute . Permissions as class-attribute apply to all functions within the class. Unspecified resource 1 2 3 <?php #[Permission('read')] Specified resource The second parameter can be used to specify the UUID of the resource. The UUID can, for example, be passed dynamically in the context of the REST API by means of a routing parameter. 1 2 3 <?php #[Permission('read', 'id')] Alternative context The third parameter can be used to specify an alternative context so that policies from other apps can be checked. 1 2 3 <?php #[Permission('read', 'id', 'com.appsdock')] Multiple policies Multiple policies can be passed directly as an array. 1 2 3 <?php #[Permission(['read', 'write', 'delete'])] For specific resources or an alternative context, these must be listed separately. 1 2 3 4 5 <?php #[Permission(['read', 'write'])] #[Permission('delete', 'id')] #[Permission('administrate', context: 'com.appsdock')] Class attribute 1 2 3 4 5 6 7 <?php #[Permission('read')] class DMS { ... } Method attribute 1 2 3 4 5 6 7 <?php #[Permission('write')] public function write ( string $text ) : bool { ... } Special cases Public access Public access at class level can be overridden by policies at method level. Again, method-level public access ignores any additional policies. 1 2 3 <?php #[PublicAccess]","title":"Policies and permissions"},{"location":"identity-access/policies-and-permissions/#policies-and-permissions","text":"","title":"Policies and permissions"},{"location":"identity-access/policies-and-permissions/#permission","text":"A permission consists of one or more policies.","title":"Permission"},{"location":"identity-access/policies-and-permissions/#examples","text":"The permission DMS user has the indefinite right to read within the entire DMS and the definite right to write in its own folders. Policy Action Role Resource Effect Read com.appsdock.dms.action:volume.read Role A * ALLOW Read com.appsdock.dms.action:volume.read Role B Volume A ALLOW Write com.appsdock.dms.action:volume.write Role B Volume B ALLOW Write com.appsdock.dms.action:volume.write Role C Volume B DENY","title":"Examples"},{"location":"identity-access/policies-and-permissions/#policy","text":"A policy consists of the action, role, resource and effect.","title":"Policy"},{"location":"identity-access/policies-and-permissions/#action","text":"Actions are defined by the apps.","title":"Action"},{"location":"identity-access/policies-and-permissions/#role","text":"Exactly one role must be assigned per policy.","title":"Role"},{"location":"identity-access/policies-and-permissions/#resource","text":"A resource can be defined or undefined. Indefinite resources are defined by means of the * .","title":"Resource"},{"location":"identity-access/policies-and-permissions/#effect","text":"The effect is either allow or deny .","title":"Effect"},{"location":"identity-access/policies-and-permissions/#permission-control","text":"The permission control is given the action as the first parameter, and the context as the second parameter. 1 2 3 4 5 6 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId () ); Given a specific resource, its UUID is given as the third parameter. 1 2 3 4 5 6 7 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId (), $appId ); Alternatively, a default value can be specified as the fourth parameter. This is only returned if no policy exists. 1 2 3 4 5 6 7 8 <?php $isPermitted = $this -> permissionController -> isPermitted ( 'read' , $this -> context -> getId (), $appId , $default );","title":"Permission control"},{"location":"identity-access/policies-and-permissions/#rest-api","text":"Permissions are defined as method-attribute or alternatively as class-attribute . Permissions as class-attribute apply to all functions within the class.","title":"REST API"},{"location":"identity-access/policies-and-permissions/#unspecified-resource","text":"1 2 3 <?php #[Permission('read')]","title":"Unspecified resource"},{"location":"identity-access/policies-and-permissions/#specified-resource","text":"The second parameter can be used to specify the UUID of the resource. The UUID can, for example, be passed dynamically in the context of the REST API by means of a routing parameter. 1 2 3 <?php #[Permission('read', 'id')]","title":"Specified resource"},{"location":"identity-access/policies-and-permissions/#alternative-context","text":"The third parameter can be used to specify an alternative context so that policies from other apps can be checked. 1 2 3 <?php #[Permission('read', 'id', 'com.appsdock')]","title":"Alternative context"},{"location":"identity-access/policies-and-permissions/#multiple-policies","text":"Multiple policies can be passed directly as an array. 1 2 3 <?php #[Permission(['read', 'write', 'delete'])] For specific resources or an alternative context, these must be listed separately. 1 2 3 4 5 <?php #[Permission(['read', 'write'])] #[Permission('delete', 'id')] #[Permission('administrate', context: 'com.appsdock')]","title":"Multiple policies"},{"location":"identity-access/policies-and-permissions/#class-attribute","text":"1 2 3 4 5 6 7 <?php #[Permission('read')] class DMS { ... }","title":"Class attribute"},{"location":"identity-access/policies-and-permissions/#method-attribute","text":"1 2 3 4 5 6 7 <?php #[Permission('write')] public function write ( string $text ) : bool { ... }","title":"Method attribute"},{"location":"identity-access/policies-and-permissions/#special-cases","text":"Public access Public access at class level can be overridden by policies at method level. Again, method-level public access ignores any additional policies. 1 2 3 <?php #[PublicAccess]","title":"Special cases"}]}